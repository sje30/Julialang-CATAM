# Control flow

## Introduction to the Collatz Conjecture
https://en.wikipedia.org/wiki/Collatz_conjecture

Paul ErdÅ‘s said about the Collatz conjecture: 
"Mathematics may not be ready for such problems".

Give an example with 7.

## Let's get coding: Control flow
Control flow: the order in which individual statements, instructions or function calls 
of an imperative program are executed or evaluated.

For this problem, we can use the remainder `%` function within an `if` loop (conditional evaluation).
```julia
x = 7  # let's start with seven

if x % 2 == 0
	x / 2   # even
else
	3x + 1  # odd
end
```

More concisely. the only operator in most language taking three operands. Ternary operator.
```julia
x%2==0 ? x/2 : 3x+1
```

We want this operation to keep on going until we reach one. 
Wrap the above in a `while` loop (repeated evaluation).

```julia
function collatzConjecture(x)
	while x != 1
		x = x%2==0 ? x/2 : 3x+1
		println(x)
	end
end

collatzConjecture(7)
```

Scoping. Can update parent scope (but parent scope cannot access local variable).
```julia
function collatzConjectureCount(x)
	count = 0
	while x != 1
		x = x%2==0 ? x/2 : 3x+1
		count += 1
	end
	return count
end

collatzConjectureCount(7)
```


## Side Notes
`elseif`
```julia
x = 10

if x > 0
	println("x is positive")
elseif x < 0
	println("x is negative")
else
	println("x is zero")
end
```












## Notes about scoping

if is "leaky". Notice how the `relation` variable can be used outside the `if`blocj where it was declared.

```julia
x = -1

if x > 0
	relation = "greater than zero"
else
	relation = "not greater than zero"
end

println("x is ", relation)
```

### Exercise: debug this
The following code gives a runtime error.
```julia
z = 0

if z > 0
	statement = "positive"
elseif z < 0
	statement = "negative"
end

println("x is ", statement)
```

Solution: you need a `else sign = "zero"`, because all possible code paths must define a value for the variable.

This leaky behaviour is not the case for `for`, `while` and `try`, which introduc new scopes. (see another document?)

## Short circuit evaluation


## Exercise: three ways of writing the same thing
```julia
function comparenumbers(x::Int, y::Int) {
	# replace this comment
}

comparenumbers(1, 1)
comparenumbers(1, 0)
comparenumbers(0, 1)
```


## Suggestions
* better if loop examples: is this a leap year? prime number? HOTPO Collatz Conjecture. https://en.wikipedia.org/wiki/Collatz_conjecture
* list comprehensions
* generator (for loops) -- why is it memory efficient?
* collect: turns generator into vector (can work with plots?)
* Monte Carlo to estimate pi. Can we do it with generator? But it's slow. It's one of the original chapters.
* Efficient series convergence.j
